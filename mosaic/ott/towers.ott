% minimal + latex + comments

embed {{ tex-preamble
  \newcommand{\keyword}[1]{\textbf{#1} }
  \newcommand{\labeledjudge}[1]{\vdash_{\!\!\mathsf{#1} } }
}}

metavar termvar, x ::= {{ tex \mathit{[[termvar]]} }} {{ com term variable }}

metavar typvar, X, F ::= {{ com type variable }}

metavar levar, l {{ tex \ell }} ::= {{ com level variable }}

metavar levsvar, L {{ tex \mathcal{L} }} ::= {{ com tower variable }}

metavar natvar, n {{ tex \imath }} ::= {{ com natural variable }}

grammar

  t :: t_ ::= {{ com term }}

  v :: v_ ::= {{ com value }}
    | constr              ::   :: Con                     {{ com constructor }}
    | \ x . t             ::   :: Lam                     {{ com abstraction }}

  nat :: n_ ::= {{ com natural }}
      | 0     ::   :: zero {{ com zero }}
      | S nat ::   :: succ {{ com successor }}

  cnat :: cn_ ::= {{ com compact natural }}
       | n      ::   :: nvar {{ com variable }}
       | 0      ::   :: zero {{ com zero }}
       | S cnat ::   :: succ {{ com successor }}
       | utmost ::   :: inf  {{ com infinity }}

  lev :: lev_ ::= {{ com level }}
      | l             ::   :: lvar      {{ com variable }}
      | 0             ::   :: zero      {{ com zero }}
      | S lev         ::   :: raise     {{ com raise }}
      | utmost        ::   :: utmost    {{ com sky }}
      | n             ::   :: nvar      {{ com nat variable }}

  levs :: ls_ ::= {{ com level tower }}
       | lev / cnat    ::   :: steps     {{ com stepped }}
       | levs /\ levs' ::   :: inters    {{ com intersection }}
       | L             ::   :: var       {{ com variable }}
       | lev '..' lev' :: M :: range     {{ com ranged }}
       | lev           :: S :: fromUp    {{ com from [[lev]] to the sky }}

  T :: T_ ::= {{ com type }}
    | *         ::   :: star  {{ com star }}
    | X         ::   :: var   {{ com variable }}
    | T T'      ::   :: appl  {{ com application }}
    | T # T'    ::   :: ann   {{ com annotation }}
    | T0 o T1   ::   :: tower {{ com tower }}
    | T -> T'   ::   :: arrow {{ com arrow }}
    | T _ levs  ::   :: level {{ com levelled }} {{ tex [[T]]_{[[levs]]} }}
    | ( T )     :: S :: parens {{ com grouping }}

  G {{ tex \Gamma }} :: G_ ::= {{ com type environment }}
    | empty               ::   :: em     {{ com empty }}
    | G , X : T           ::   :: vn     {{ com extension }}
    | G' o G              ::   :: refin  {{ com tower }}

terminals :: 'terminals_' ::=
    | *    ::  :: star   {{ tex \star }}            {{ com kind star }}
    | empty :: :: emptycontext {{ tex \emptyset }}  {{ com empty set }}
    | o    ::  :: degree {{ tex ^\circ }}           {{ com type refinement }}
    | #    ::  :: ann    {{ tex :: }}               {{ com type annotation }}
    | ->   ::  :: arrow  {{ tex \rightsquigarrow }} {{ com level arrow }}
    | \    ::  :: lambda {{ tex \lambda }}          {{ com lambda }}
    | utmost :: :: utmost {{ tex ^\infty }}         {{ com sky high }}
    | '|-' ::   :: turnstile {{ tex \vdash }}       {{ com in context }}
    | ^    ::   :: rises {{ tex \Rsh }}             {{ com reaches up }}
    | /    ::   :: steps {{ tex {\shortmid} }}      {{ com steps }}
    | /\   ::   :: inter {{ tex \cap }}             {{ com intersection }}

parsing

  T_ann <= T_level
  T_tower <= T_level

subrules

  nat <:: cnat

  cnat <:: lev


defns Jlev :: '' ::=

defn

   levs ^ levs' :: :: rises :: rises_ {{ com [[levs]] reach up to [[levs']] }} by

   --------------------------- :: skyscraper
   l / utmost ^ S l / utmost

   --------------------- :: finite
   l / S n ^ S l / n


defns Jtype :: '' ::=

defn

    G |- T : T1 :: :: GtT :: GtT_ by

    --------------- :: star
    empty |- * _ S S n : * _ S S S n


    G |- X' : T' _ l / n'
    G |- X : T _ l / n
    ------------------------ :: arrow
    G |- X' -> X : * _ S l

      |-lv l' / n' /\ l / n : ok
    G |- X : T' _ l' / n'
    G |- F : (T' -> T) _ l / n
    --------------------------- :: application
    G |- F X : T _ l' / n' /\ l / n

defns Jlevs :: 'lv_' ::= 

defn

    |-lv levs : ok :: :: Lok :: Lok_ {{ tex \labeledjudge{lv} [[levs]] }} by


    --------------- :: justRange
    |-lv l / n : ok

    ------------------------- :: zero
    |-lv 0 / n /\ 0 / n' : ok

    |-lv l / n /\ l' / n' : ok
    ------------------------------ :: step
    |-lv S l / n /\ S l' / n' : ok


defn

    |-tw T : ok :: :: Tok :: Tok_ {{ tex \labeledjudge{tw} [[T]] }} by


    ---------------- :: annotated
    |-tw T # T' : ok

         L ^ L''
         T ~ T''
    |-tw T _ L # T' : ok
    ----------------------------------- :: refined
    |-tw T _ L  # (T'' _ L'' o T') : ok

         L' ^ L'''
         T' ~ T'''
    |-tw T _ L  # (T'' _ L'' o T' _ L') : ok
    -------------------------------------------------------- :: reannotated
    |-tw T _ L  # ((T'' _ L'' # T''' _ L''') o T' _ L') : ok




defns Juni :: '' ::=

defn

    T ~ T' :: :: unifies :: uni_ {{ com [[T]] unifies with [[T']] irrespective of level }} {{ tex [[T]] \sim [[T']] }} by


funs
  LevelUp ::=

fun
  levs0 + ONE :: levs :: up {{ com a function of type $levs \rightarrow levs$, raising start level }} {{ tex \widehat{[[levs0]]} }}
by
  l / utmost + ONE === S l / utmost
  l / S n + ONE === S l / n

fun
  G0 + ONE :: G :: Gup {{ com a function of type $\Gamma \rightarrow \Gamma$, raising start level where possible }} {{ tex \widehat{[[G0]]} }}
by
  empty + ONE === empty

% {{ com drop binding }}
  G , X : (T _ l / 0) + ONE === G + ONE

% {{ com raise binding of $[[X]]$ }}
  G , X : (T _ l / S n) + ONE === G + ONE , X : T _ S l / n

  G , X : (T _ l / utmost) + ONE === G + ONE , X : T _ S l / utmost