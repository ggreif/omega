% minimal + latex + comments

metavar termvar, t ::= {{ com term variable }}
metavar univar, V {{ tex \mathcal{V} }} ::= {{ com unification variable }}
metavar levar, l {{ tex \ell }} ::= {{ com level variable }}
metavar diffvar, d {{ tex \mathcal{\delta} }} ::= {{ com level difference variable }}
metavar namevar, name ::= {{ com name }}

grammar
  C :: c_ ::= {{ com constants }}
    | *              ::   :: Star                      {{ com the type of types }}
    | name           ::   :: Named                     {{ com named constructor }}

  T {{ tex \mathcal{T} }} :: t_ ::= {{ com term }}
    | C              ::   :: Const                     {{ com constant }}
    | t              ::   :: Var                       {{ com variable }}
    | T T'           ::   :: App                       {{ com application }}
    | \ d T . T'     ::   :: Abs                       {{ com abstraction }}      {{ tex \lambda_{[[d]]}[[T]].[[T']] }}
    | [ T ] T'       ::   :: Box                       {{ com filled box }}
    | T : T'         ::   :: Inhabits                  {{ com inhabitation }}
    | T l            ::   :: Level                     {{ com level placement }}  {{ tex [[T]]_{[[l]]} }}

terminals :: 'terminals_' ::=
    | \   ::  :: lambda   {{ tex \lambda }}              {{ com lambda }}
    | []  ::  :: emptybox {{ tex \square }}              {{ com empty box }}
    | :   ::  :: inhabits {{ tex \mathbin{::} }}         {{ com double colon }}
    | *   ::  :: star     {{ tex \star }}                {{ com star }}


defns Open :: 'open_' ::= 
  defn
  T open :: :: isopen ::'' {{ com [[T]] is an open term }} by

    --------------- :: star
       * open

       T open
       T' : T
    --------------- :: inhabitant
       T' open

defns Boxes :: 'box_' ::= 

  defn
  T1 : T2 :: :: refine ::'' {{ com [[T1]] refines to [[T2]]}} by

      T open
      t : T
    --------------- :: has_inhabitant
      t : [t]T

      t : [t]T
      t' : [t0]\ d T . T'
    ---------------------- :: lossy_fun
      t' t : [t1]T'

      t : [t0]T
      t' : [t']\ d T . T'
    ---------------------- :: lossy_arg
      t' t : [t1]T'

      t : [t]T
      t' : [t']\ d T . T'
    ---------------------- :: faithful
      t' t : [t' t]T'

embed {{ tex
  \section{Objects}
  Above we see the grammar of the objects of the proposed category of levelled terms.
  Every object is implicitly tagged with a starting level. For values this is 0 (zero).
  The types are at level 1 and the kinds at level 2. Superkinds appear at higher levels.
  We can make the level explicit by subscripting ($\mathcal{T}_\ell$). When not placed at
  a fixed level, a term simultaneously occupies all admissible levels ($\ell, \ell+1, ...$).
  Admissible levels are determined by an object's context. We'll hear about this later.
  
  The star ($\star$) is the prototypical open kind. Its level is two or higher. Open objects
  can be inhabitated to create fresh ones. Whether the fresh objects are themselves open or closed,
  depends on the way how the inhabitation happens.

  Every object has an implicit object at a higher level, that is its classifying type. We can make this
  explicit by appealing to the inhabitation notation ($\mathcal{T}_\ell \mathbin{::} \mathcal{T}_{\ell+1}$).
  $\star_\ell$ inhabits its higher-level self ($\star_\ell \mathbin{::} \star_{\ell+1}$).

  We distinguish between classifying types with unknown and known inhabitance. Known inhabitance
  induces the box modality ($\square\mathcal{T}$). Clearly this modality only makes sense at levels
  one and up, since level zero objects are effectively always closed. When the exact inhabitant is known
  we are free to put it into the box (e.g. $[\star_{\ell}]\star_{\ell+1}$).
  This refines the type, effectively creating a subtype. Putting a variable into the box equates that
  variable to the known inhabitant, and the variable's name becomes bound in the scope. Thus empty boxes
  can be regarded as variable filled boxes ($[t]\mathcal{T}$) where the variable is not referred to.
  The judgements show how the modal lambda calculus' K rule carries over to our system. The lossy judgements
  explain how the missing knowledge of the function's definition (apart from its termination) invalidates
  our precise knowledge about the argument. Conversely precise knowledge of the function is in vain
  when there is no precise knowledge about the argument. The faithful rule demonstrates how evaluation
  can proceed in the box.
  

  \subsection{Type equality}
  .

  \subsection{Constants}
  Constants are terms which have names, and we consider $\star$ a name too.
  New constants can be defined by inhabiting open terms. Inhabitation scopes. Outwards injection.

  \section{Morphisms}
  The simplest non-trivial morphism is the extraction of a type from an object. We'll refer to it by
  $\tau\colon \mathcal{T}_{\ell} \to \mathcal{T}_{\ell+1}$.

  The $\lambda$ objects are internalised morphisms. $\lambda_0$ is the function former known from the
  simply typed lambda calculus. $\lambda_1$ is the dependent function space type former (e.g. from the
  calculus of constructions). Generally the $\delta$ subscript to $\lambda$ denotes the level difference
  of the argument and the result. This is necessary to be specified as both can have admissible level ranges.
  It should be noted that $\tau$ raises the level difference:
  $\tau(\lambda_0\mathcal{T}_\ell.\mathcal{T}_\ell) \longrightarrow \lambda_1\mathcal{T}_\ell.\mathcal{T'}_{\ell+1}$.
  We recognise System F's $\Lambda$ as $\lambda_0\mathcal{T}_1.\mathcal{T}_1$.
  
  \section{Removal of Boxes}
  The endofunctor from our category to e.g. the category of CC is characterised by the removal of all box
  modalities from the objects. This can be regarded as a limited form of type erasure. It is interesting to
  consider the left adjoint to this forgetful functor. It can clearly not insert arbitrarily filled boxes at
  every level, as every level but the smallest is a known categorising type of its level below. So for
  $\mathcal{T}_\ell \mathbin{::} \mathcal{T'}_{\ell+1} \mathbin{::} \mathcal{T''}_{\ell+2} \mathbin{::} ...$
  we obtain filled boxes
  $\mathcal{T}_\ell \mathbin{::} [\mathcal{T}_\ell]\mathcal{T'}_{\ell+1} \mathbin{::} [\mathcal{T'}_{\ell+1}]\mathcal{T''}_{\ell+2} \mathbin{::} ...$
  

  \section{Judgements}
}}


